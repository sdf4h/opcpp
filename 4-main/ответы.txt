Какие классы используются в C++ для работы с файловыми потоками?
ifstream, ofstream, fstream 
В чем разница между ifstream, ofstream и fstream?
ifstream (input filestream) — предназначен для чтения данных из файла.
ofstream (output filestream) — используется для записи данных в файл.
fstream (file stream) — универсальный класс, поддерживающий как чтение, так и запись.
Как открыть файл в режиме добавления (append) и что это значит?
Чтобы открыть файл в режиме добавления, можно использовать ofstream с флагом ios::app. Это означает, что новые данные будут добавлены в конец файла, не перезаписывая существующее содержимое

Какие методы позволяют проверить успешность открытия файла перед его чтением или записью?
Всегда проверять успешность открытия файла (is_open()) и f.clear() для сброса флагов ошибок
Как с помощью регулярных выражений найти все числа в строке "I have 42 apples and 3 bananas."?
#include <regex>
#include <iostream>
using namespace std;

int main() {
    string text = "I have 2 apples and 3 bananas.";
    regex rx("\\d+");
    
    string result = regex_replace(text, rx, "[number]");
    cout << result << endl;
}
Выход
I have [number] apples and [number] bananas.

Чем отличаются функции regex_match() и regex_search()?
bool regex_match(строка, regex) – проверяет, соответствует ли строка полностью шаблону регулярного выражения.
bool regex_search(строка, regex) – ищет совпадение шаблона в строке.

Как выполнить команду операционной системы в C++?
Функция system позволяет запускать команды так, как если бы они были введены в командной строке
Что делает функция getenv() и какие переменные окружения Windows можно с ее помощью получить?
Функция getenv позволяет получить значение переменной окружения
Основные переменные окружения Windows
COMPUTERNAME – имя компьютера.
HOMEPATH, USERPROFILE – путь к профилю пользователя.
TEMP, TMP – путь к временным файлам.
PATH – список директорий с исполняемыми файлами.
Какова основная функция библиотеки <chrono> в C++?
Для более точного измерения времени, вплоть до наносекунд, используется библиотека <chrono>
В чем разница между steady_clock и high_resolution_clock?
steady_clock обеспечивает постоянную скорость работы, что делает его идеальным для измерения времени между событиями
high_resolution_clock предоставляет наивысшую доступную разрешение времени, но может не быть стабильным, что делает его менее надежным для точных измерений интервалов
