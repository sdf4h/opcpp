Ответы на 10-12 вопросы.

10)Что такое шаблонные функции и какие основные преимущества они предоставляют для обобщенного программирования? 
Это функции, которые могут работать с различными типами данных, не требуя явного указания этих типов при написании кода. Они позволяют писать обобщенный код, который автоматически адаптируется к типам данных, переданным в функцию.

11)Как осуществляется специализация шаблонных функций, и в каких случаях она может быть полезна? Приведите пример. 
Осуществляется путем предоставления явной специализации (переопределения) шаблона функции для определённого типа.
Может быть полезна, когда общий шаблон не подходит для конкретного типа.
Пример:
template <typename T> void print(T value) {
cout << "General template: " << value; 
} 
// Специализация для типа const char* 
template <> void print<const char*>(const char* value) { 
cout << "Specialized template: " << value; 
}

12)Что происходит, если шаблонная функция вызывается с несовместимыми типами? Как компилятор реагирует на такие ошибки?
Компилятор попытается вывести типы и сгенерировать подходящую версию функции. Если это невозможно, возникнет ошибка компиляции.
